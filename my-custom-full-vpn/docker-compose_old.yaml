networks:
  mediastack:
    name: mediastack
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "${DOCKER_SUBNET:?Add to your env file}"
          gateway: "${DOCKER_GATEWAY:?Add to your env file}"
  nginx_internal:
    driver: bridge
  nginx2gluetun:
    driver: bridge
  nginx2authentik:
    driver: bridge
  cloudflared2authentik:
    driver: bridge



services:
###########################################################################
###########################################################################
##
##  Docker Compose File: Gluetun (qmcgaw)
##  Function: VPN Client
##
##  Documentation: https://github.com/qdm12/gluetun-wiki
##
###########################################################################
###########################################################################
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    restart: always
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun

    # Comment out lines below if they are not going to use Gluetun VPN for Internet connection:
    ports:
    # WebUI Ports:
      - "${WEBUI_PORT_BAZARR:-6767}:6767"        # WebUI Portal: Bazarr
      - "${WEBUI_PORT_JELLYFIN:-8096}:8096"      # WebUI Portal: Jellyfin
      - "${WEBUI_PORT_JELLYSEERR:-5055}:5055"    # WebUI Portal: Jellyseerr
      - "${WEBUI_PORT_LIDARR:-8686}:8686"        # WebUI Portal: Lidarr
      - "${WEBUI_PORT_MYLAR:-8090}:8090"         # WebUI Portal: Mylar3
      - "${WEBUI_PORT_PROWLARR:-9696}:9696"      # WebUI Portal: Prowlarr
      - "${WEBUI_PORT_RADARR:-7878}:7878"        # WebUI Portal: Radarr
      - "${WEBUI_PORT_READARR:-8787}:8787"       # WebUI Portal: Readarr
      - "${WEBUI_PORT_SABNZBD:-8080}:8080"       # WebUI Portal: SABnzbd
      - "${WEBUI_PORT_SONARR:-8989}:8989"        # WebUI Portal: Sonarr
      - "${WEBUI_PORT_WHISPARR:-6969}:6969"      # WebUI Portal: Whisparr
      - "${WEBUI_PORT_FILEBOT:-5454}:5454"       # WebUI Portal: Filebot
      - "${WEBUI_PORT_PLEX:-32400}:32400"        # WebUI Portal: Plex
      - "${WEBUI_PORT_TDARR:-8265}:8265"         # WebUI Portal: Tdarr
#      - "${WEBUI_PORT_AUTHENTIK:-9443}:9443"     # WebUI Portal: Authentik
      - "${WEBUI_PORT_QBITTORRENT:-8200}:8200"   # WebUI Portal: qBittorrent

    # Service Ports:
      - "${QBIT_PORT:-6881}:6881"                # Transmission Torrent Port
      - "${FLARESOLVERR_PORT:-8191}:8191"        # Service Port: FlareSolverr
      - "${TDARR_SERVER_PORT:-8266}:8266"        # Tdarr: Server Port
      # - "1900:1900/udp"                         # DNLA Service (Clashes with Synology)
      # - "5353:5353/udp"                         # Plex Network Port (Clashes with Synology)
      # - "8324:8324"                             # Plex Network Port
      # - "32410:32410/udp"                       # Plex Network Port
      # - "32412:32412/udp"                       # Plex Network Port
      # - "32413:32413/udp"                       # Plex Network Port
      # - "32414:32414/udp"                       # Plex Network Port
      # - "32469:32469"                           # Plex Network Port
    # Gluetun Local Network Ports:
      - "8888:8888/tcp"                         # Gluetun Local Network HTTP proxy
      - "8388:8388/tcp"                         # Gluetun Local Network Shadowsocks TCP
      - "8388:8388/udp"                         # Gluetun Local Network Shadowsocks UDP
      - "${GLUETUN_CONTROL_PORT:?Add to your env file}:${GLUETUN_CONTROL_PORT:?Add to your env file}" # Gluetun Status Port

    volumes:
      - "${FOLDER_FOR_DATA:?Add to your env file}/gluetun:/gluetun"
    environment:
      PUID: "${PUID:?Add to your env file}"
      PGID: "${PGID:?Add to your env file}"
      UMASK: "${UMASK:?Add to your env file}"
      TZ: "${TIMEZONE:?Add to your env file}"
      VPN_SERVICE_PROVIDER: "${VPN_SERVICE_PROVIDER:?Add to your env file}"
      OPENVPN_USER: "${VPN_USERNAME:?Add to your env file}"
      OPENVPN_PASSWORD: "${VPN_PASSWORD:?Add to your env file}"
      SERVER_CATEGORIES: "${SERVER_CATEGORIES}"
      SERVER_CITIES: "${SERVER_CITIES}"
      SERVER_COUNTRIES: "${SERVER_COUNTRIES}"
      SERVER_HOSTNAMES: "${SERVER_HOSTNAMES}"
      SERVER_REGIONS: "${SERVER_REGIONS}"
      FIREWALL_OUTBOUND_SUBNETS: "${LOCAL_SUBNET:?Add to your env file}"
      OPENVPN_CUSTOM_CONFIG: "${OPENVPN_CUSTOM_CONFIG}"
      HTTP_CONTROL_SERVER_ADDRESS: ":${GLUETUN_CONTROL_PORT:?Add to your env file}"
      VPN_TYPE: "${VPN_TYPE}"
      VPN_ENDPOINT_IP: "${VPN_ENDPOINT_IP}"
      VPN_ENDPOINT_PORT: "${VPN_ENDPOINT_PORT}"
      WIREGUARD_PUBLIC_KEY: "${WIREGUARD_PUBLIC_KEY}"
      WIREGUARD_PRIVATE_KEY: "${WIREGUARD_PRIVATE_KEY}"
      WIREGUARD_PRESHARED_KEY: "${WIREGUARD_PRESHARED_KEY}"
      WIREGUARD_ADDRESSES: "${WIREGUARD_ADDRESSES}"
      HTTPPROXY: "on"
      SHADOWSOCKS: "on"
    networks:
      - mediastack
      - nginx2gluetun
    healthcheck:
      test: ["CMD", "pgrep", "gluetun"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##    Docker Compose File: NGINX (Nginx Proxy Manager)
##    Function: Reverse Proxy
##
##    Documentation: https://nginxproxymanager.com/
##    https://nginxproxymanager.com/guide/
##
###########################################################################
###########################################################################
  nginx:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/usr/bin/check-health"]
      interval: 10s
      timeout: 3s
    depends_on:
      - nginx_db
    ports:
      - "80:80"                                  # NGINX Public HTTP Port
      - "443:443"                                # NGINX Public HTTPS Port
      - "${WEBUI_PORT_NGINX:?Add to your env file}:81"  # WebUI Portal: Nginx Proxy Manager
    environment:
      DB_POSTGRES_HOST: nginx_db
      DB_POSTGRES_PORT: "5432"
      DB_POSTGRES_USER: npm
      DB_POSTGRES_PASSWORD: npmpass
      DB_POSTGRES_NAME: npm
      DISABLE_IPV6: "${NGINX_DISABLE_IPV6:-false}"
      INITIAL_ADMIN_EMAIL: "${NGINX_INITIAL_ADMIN_EMAIL:?err}"
      INITIAL_ADMIN_PASSWORD: "${NGINX_INITIAL_ADMIN_PASSWORD:?err}"
    volumes:
      - "${FOLDER_FOR_DATA:-/mnt/nfs/setup}/nginx/data:/data"
      - "${FOLDER_FOR_DATA:-/mnt/nfs/setup}/nginx/letsencrypt:/etc/letsencrypt"
    networks:
      - mediastack
      - nginx_internal
      - nginx2gluetun
      - nginx2authentik
      - cloudflared2authentik

  nginx_db:
    image: postgres:latest
    container_name: nginx_db
    environment:
      POSTGRES_USER: npm
      POSTGRES_PASSWORD: npmpass
      POSTGRES_DB: npm
    volumes:
      - "${FOLDER_FOR_DATA:?Add to your env file}/nginx/postgres:/var/lib/postgresql/data"
    networks:
      - nginx_internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U npm"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
##
##  Docker Compose File: Flaresolverr (Flaresolverr)
##  Function: Cloudflare Proxy Server
##
##  Documentation: https://github.com/FlareSolverr/FlareSolverr
##
###########################################################################
###########################################################################
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=${TIMEZONE:?err}
    network_mode: "service:gluetun"
#    ports:
#      - "${FLARESOLVERR_PORT:?err}:8191"             # Configured in Gluetun VPN container
###########################################################################
###########################################################################
##
##  Docker Compose File: Cloudflared
##  Function: CF-Tunnel
##
##  Documentation: https://cloudflare.com/docs/tunnels/
##  https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/
##
###########################################################################
###########################################################################

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CF_TUNNEL_TOKEN:?err}
    networks:
      - mediastack
    healthcheck:
      test: ["CMD", "cloudflared", "tunnel", "list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################




###########################################################################
###########################################################################
##
##  Docker Compose File: Authentik
##  Function: Authentification and Authorization System
##
##  Documentation: https://getauthentik.io/docs/
##
###########################################################################
###########################################################################

  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    container_name: authentik-postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ${FOLDER_FOR_DATA}/authentik/pgdatabase:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    container_name: authentik-redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-latest}
    restart: unless-stopped
    command: server
    container_name: authentik-server
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
#      AUTHENTIK_BOOTSTRAP_EMAIL: ${AUTHENTIK_BOOTSTRAP_EMAIL:?please refer to authentik flow}  
#      AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASSWORD}
#      AUTHENTIK_COOKIE_DOMAIN: ${AUTHENTIK_COOKIE_DOMAIN}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ${FOLDER_FOR_DATA:?err}/authentik/media:/media
      - ${FOLDER_FOR_DATA}/authentik/templates:/templates
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-latest}
    restart: unless-stopped
    command: worker
    container_name: authentik-worker
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${FOLDER_FOR_DATA:?check.env}/authentik/media:/media
      - ${FOLDER_FOR_DATA}/authentik/certs:/certs
      - ${FOLDER_FOR_DATA}/authentik/templates:/templates

    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "ps", "-ef", "|", "grep", "worker", "|", "grep", "-v", "grep"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s


###########################################################################
###########################################################################
##
##  Docker Compose File: Filebot (GitHub)
##  Function: Lookup and Rename Media from Internet Databases
##
##  Docker Page:   https://github.com/filebot/filebot-docker#filebot-xpra
##  Homepage:      https://www.filebot.net/
##  User Forum:    https://www.filebot.net/forums
##
###########################################################################
###########################################################################
  filebot:
    image: rednoah/filebot:xpra
    container_name: filebot
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/filebot:/data/filebot
      - ${FOLDER_FOR_MEDIA:?err}/filebot:/filebot
    environment:
#      - XPRA_AUTH=password:value=YOUR_PASSWORD
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - UMASK=${UMASK:?err}
      - TZ=${TIMEZONE:?err}
      - DARK_MODE=1
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "java"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: Jellyfin (LinuxServer.io)
##  Function: Media Server
##
##  Documentation: https://jellyfin.org/docs/general/administration/installing#docker
##  https://jellyfin.org/docs/general/administration/hardware-acceleration/
##
###########################################################################
###########################################################################
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
# Add Configurations for GPU Hardware Rendering Here:
#    devices:
#      - /dev/dri/renderD128:/dev/dri/renderD128
#      - /dev/dri/card0:/dev/dri/card0
    volumes:
      - ${FOLDER_FOR_DATA:?err}/jellyfin:/config
      - ${FOLDER_FOR_MEDIA:?err}/media:/data/media
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - UMASK=${UMASK:?err}
      - TZ=${TIMEZONE:?err}
#      - JELLYFIN_PublishedServerUrl=${LOCAL_DOCKER_IP:?err}  # Enable for DLNA - Only works on HOST Network Mode
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "ps", "-ef", "|", "grep", "jellyfin", "|", "grep", "-v", "grep"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: Jellyseerr (fallenbagel)
##  Function: Media Request Manager
##
##  Documentation: https://hub.docker.com/r/fallenbagel/jellyseerr
##
###########################################################################
###########################################################################
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/jellyseerr:/app/config
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - UMASK=${UMASK:?err}
      - TZ=${TIMEZONE:?err}
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(require('fs').existsSync('/app/config/config.json') ? 0 : 1)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: Plex (LinuxServer.io)
##  Function: Media Server
##
##  Documentation: https://hub.docker.com/r/linuxserver/plex
##
###########################################################################
###########################################################################
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
# Add Configurations for GPU Hardware Rendering Here:
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    volumes:
      - ${FOLDER_FOR_DATA:?err}/plex:/config
      - ${FOLDER_FOR_MEDIA:?err}/media:/data/media
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - UMASK=${UMASK:?err}
      - TZ=${TIMEZONE:?err}
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "Plex Media Server"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: Bazarr (LinuxServer.io)
##  Function: Download subtitles for Radarr and Sonarr
##
##  Documentation: https://docs.linuxserver.io/images/docker-bazarr
##
###########################################################################
###########################################################################
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/bazarr:/config
      - ${FOLDER_FOR_MEDIA:?err}:/data
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - TZ=${TIMEZONE:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:bazarr
      - TP_THEME=${TP_THEME:?err}
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "bazarr"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: Homarr (https://ghcr.io/)
##  Function: Application Dashboard
##
##  Documentation: https://homarr.dev/docs/getting-started/after-the-installation
##
###########################################################################
###########################################################################
  homarr:
    image: ghcr.io/ajnart/homarr:latest
    container_name: homarr
    restart: unless-stopped
    ports:
      - ${WEBUI_PORT_HOMARR:?err}:7575
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${FOLDER_FOR_DATA:?err}/homarr/configs:/app/data/configs
      - ${FOLDER_FOR_DATA:?err}/homarr/icons:/app/public/icons
      - ${FOLDER_FOR_DATA:?err}/homarr/data:/data
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - UMASK=${UMASK:?err}
      - TZ=${TIMEZONE:?err}
# NOTE: Homarr MUST NOT connect to the Gluetun VPN container
    networks:
      - mediastack
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(require('fs').existsSync('/app/data/configs') ? 0 : 1)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: Lidarr (LinuxServer.io)
##  Function: Music Library Manager
##
##  Documentation: https://docs.linuxserver.io/images/docker-lidarr
##
###########################################################################
###########################################################################
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/lidarr:/config
      - ${FOLDER_FOR_MEDIA:?err}:/data
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - TZ=${TIMEZONE:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:lidarr
      - TP_THEME=${TP_THEME:?err}
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "lidarr"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: Mylar3 (LinuxServer.io)
##  Function: Comic Library Manager
##
##  Documentation: https://github.com/mylar3/mylar3/wiki
##
###########################################################################
###########################################################################
  mylar:
    image: lscr.io/linuxserver/mylar3:latest
    container_name: mylar
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/mylar:/config
      - ${FOLDER_FOR_MEDIA:?err}:/data
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - TZ=${TIMEZONE:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:mylar3
      - TP_THEME=${TP_THEME:?err}
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "mylar3"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: Prowlarr (LinuxServer.io)
##  Function: Indexer and Search Manager
##
##  Documentation: https://docs.linuxserver.io/images/docker-prowlarr
##
###########################################################################
###########################################################################
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/prowlarr:/config
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - TZ=${TIMEZONE:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:prowlarr
      - TP_THEME=${TP_THEME:?err}
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "prowlarr"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: Radarr (LinuxServer.io)
##  Function: Movie Library Manager
##
##  Documentation: https://docs.linuxserver.io/images/docker-radarr
##
###########################################################################
###########################################################################
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/radarr:/config
      - ${FOLDER_FOR_MEDIA:?err}:/data
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - TZ=${TIMEZONE:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:radarr
      - TP_THEME=${TP_THEME:?err}
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "radarr"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: Readarr (LinuxServer.io)
##  Function: Book Library Manager
##
##  Documentation: https://docs.linuxserver.io/images/docker-readarr
##
###########################################################################
###########################################################################
  readarr:
    image: lscr.io/linuxserver/readarr:amd64-0.4.3-develop
    container_name: readarr
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/readarr:/config
      - ${FOLDER_FOR_MEDIA:?err}:/data
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - TZ=${TIMEZONE:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:readarr
      - TP_THEME=${TP_THEME:?err}
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "readarr"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: Sonarr (LinuxServer.io)
##  Function: Series Library Manager (TV Shows)
##
##  Documentation: https://docs.linuxserver.io/images/docker-sonarr
##
###########################################################################
###########################################################################
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/sonarr:/config
      - ${FOLDER_FOR_MEDIA:?err}:/data
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - TZ=${TIMEZONE:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:sonarr
      - TP_THEME=${TP_THEME:?err}
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "sonarr"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: Tdarr V2 (haveagitgat/tdarr)
##  Function: Tdarr V2 - Audio/Video library transcoding automation
##            (Contains Tdarr_Server and WebUI ) 
##
##  Documentation: https://docs.tdarr.io/docs/installation/docker/run-compose/
##  https://docs.tdarr.io/docs/installation/docker/hardware-transcoding
##
###########################################################################
###########################################################################
  tdarr:
    image: ghcr.io/haveagitgat/tdarr:latest
    container_name: tdarr
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/tdarr/server:/app/server
      - ${FOLDER_FOR_DATA:?err}/tdarr/configs:/app/configs
      - ${FOLDER_FOR_DATA:?err}/tdarr/logs:/app/logs
      - ${FOLDER_FOR_DATA:?err}/tdarr_transcode_cache:/temp
      - ${FOLDER_FOR_MEDIA:?err}/media:/data
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - UMASK=${UMASK:?err}
      - TZ=${TIMEZONE:?err}
      - serverIP=0.0.0.0
      - serverPort=${TDARR_SERVER_PORT:?err}
      - webUIPort=${WEBUI_PORT_TDARR:?err}
      - internalNode=true
      - nodeID=Tdarr_Server
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "Tdarr_Server"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  tdarr-node:
    image: ghcr.io/haveagitgat/tdarr_node:latest
    container_name: tdarr-node
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/tdarr/configs:/app/configs
      - ${FOLDER_FOR_DATA:?err}/tdarr/logs:/app/logs
      - ${FOLDER_FOR_DATA:?err}/tdarr_transcode_cache:/temp
      - ${FOLDER_FOR_MEDIA:?err}/media:/data
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - UMASK=${UMASK:?err}
      - TZ=${TIMEZONE:?err}
      - nodeID=Tdarr_Node_1
      - serverIP=0.0.0.0
      - serverPort=${TDARR_SERVER_PORT:?err}
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "Tdarr_Node"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: Unpackerr (Hotio.Dev)
##  Function: Archive Media Extraction
##
##  Documentation: https://github.com/davidnewhall/unpackerr
##  https://github.com/davidnewhall/unpackerr/blob/master/examples/docker-compose.yml
##
###########################################################################
###########################################################################
  unpackerr:
    image: ghcr.io/hotio/unpackerr:latest
    container_name: unpackerr
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/unpackerr:/config
      - ${FOLDER_FOR_MEDIA:?err}:/data
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - UN_SONARR_0_API_KEY=${SONARR_API_KEY:?err}
      - UN_RADARR_0_API_KEY=${RADARR_API_KEY:?err}
      - UN_LIDARR_0_API_KEY=${LIDARR_API_KEY:?err}
      - UN_READARR_0_API_KEY=${READARR_API_KEY:?err}
      # Remove duplicate or incorrect lines for UN_FOLDER_0_PATH and UN_FOLDER_0_EXTRACT_PATH
      # - UN_FOLDER_0_PATH=${UN_FOLDER_0_PATH:?err}
      # - UN_FOLDER_0_EXTRACT_PATH=${UN_FOLDER_0_EXTRACT_PATH:?err}
      - UMASK=${UMASK:?err}
      - TZ=${TIMEZONE:?err}
# Documentation on all Environment Variables can be found at:
# https://github.com/davidnewhall/unpackerr#docker-env-variables
      - UN_DEBUG=false
      - UN_LOG_FILE=
      - UN_LOG_FILES=10
      - UN_LOG_FILE_MB=10
      - UN_INTERVAL=2m
      - UN_START_DELAY=1m
      - UN_RETRY_DELAY=5m
      - UN_MAX_RETRIES=3
      - UN_PARALLEL=1
      - UN_FILE_MODE=0664
      - UN_DIR_MODE=0775
      # Sonarr Config - Copy API Key from: http://sonarr:8989/general/settings
      - UN_SONARR_0_URL=http://sonarr:8989
      - UN_SONARR_0_PATHS_0=/data/torrents/anime
      - UN_SONARR_0_PATHS_1=/data/torrents/tv
      - UN_SONARR_0_PROTOCOLS=torrent
      - UN_SONARR_0_TIMEOUT=10s
      - UN_SONARR_0_DELETE_ORIG=false
      - UN_SONARR_0_DELETE_DELAY=5m
      # Radarr Config - Copy API Key from: http://radarr:7878/general/settings
      - UN_RADARR_0_URL=http://radarr:7878
      - UN_RADARR_0_PATHS_0=/data/torrents/movies
      - UN_RADARR_0_PROTOCOLS=torrent
      - UN_RADARR_0_TIMEOUT=10s
      - UN_RADARR_0_DELETE_ORIG=false
      - UN_RADARR_0_DELETE_DELAY=5m
      # Lidarr Config - Copy API Key from: http://lidarr:8686/general/settings
      - UN_LIDARR_0_URL=http://lidarr:8686
      - UN_LIDARR_0_PATHS_0=/data/torrents/music
      - UN_LIDARR_0_PROTOCOLS=torrent
      - UN_LIDARR_0_TIMEOUT=10s
      - UN_LIDARR_0_DELETE_ORIG=false
      - UN_LIDARR_0_DELETE_DELAY=5m
      # Readarr Config - Copy API Key from: http://readarr:8787/general/settings
      - UN_READARR_0_URL=http://readarr:8787
      - UN_READARR_0_PATHS_0=/data/torrents/books
      - UN_READARR_0_PROTOCOLS=torrent
      - UN_READARR_0_TIMEOUT=10s
      - UN_READARR_0_DELETE_ORIG=false
      - UN_READARR_0_DELETE_DELAY=5m
      # Folder Config
      - UN_FOLDER_0_PATH=
      - UN_FOLDER_0_EXTRACT_PATH=
      - UN_FOLDER_0_DELETE_AFTER=10m
      - UN_FOLDER_0_DELETE_ORIGINAL=false
      - UN_FOLDER_0_DELETE_FILES=false
      - UN_FOLDER_0_MOVE_BACK=false
      # Webhook Config
      - UN_WEBHOOK_0_URL=
      - UN_WEBHOOK_0_NAME=
      - UN_WEBHOOK_0_NICKNAME=Unpackerr
      - UN_WEBHOOK_0_CHANNEL=
      - UN_WEBHOOK_0_TIMEOUT=10s
      - UN_WEBHOOK_0_SILENT=false
      - UN_WEBHOOK_0_IGNORE_SSL=false
      - UN_WEBHOOK_0_EXCLUDE_0=
      - UN_WEBHOOK_0_EVENTS_0=0
      - UN_WEBHOOK_0_TEMPLATE_PATH=
      - UN_WEBHOOK_0_CONTENT_TYPE=application/json
      # Command Hook Config
      - UN_CMDHOOK_0_COMMAND=
      - UN_CMDHOOK_0_NAME=
      - UN_CMDHOOK_0_TIMEOUT=10s
      - UN_CMDHOOK_0_SILENT=false
      - UN_CMDHOOK_0_SHELL=false
      - UN_CMDHOOK_0_EXCLUDE_0=
      - UN_CMDHOOK_0_EVENTS_0=0
    security_opt:
      - no-new-privileges:true
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "unpackerr"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s





######### DOWNLOAD #########

###########################################################################
###########################################################################
##
##  Docker Compose File: qBittorrent (LinuxServer.io)
##  Function: Torrent Download Client
##
##  Documentation: https://docs.linuxserver.io/images/docker-qbittorrent
##
###########################################################################
###########################################################################
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/qbittorrent:/config
      - ${FOLDER_FOR_MEDIA:?err}:/data
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - UMASK=${UMASK:?err}
      - TZ=${TIMEZONE:?err}
      - WEBUI_PORT=${WEBUI_PORT_QBITTORRENT:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:qbittorrent
      - TP_THEME=${TP_THEME:?err}
## Do Not Change Network for qBittorrent
## qBittorrent MUST always use a VPN / Secure Internet connection
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "qbittorrent-nox"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

###########################################################################
###########################################################################
##
##  Docker Compose File: SABnzbd (LinuxServer.io)
##  Function: Usenet Download Client
##
##  Documentation: https://docs.linuxserver.io/images/docker-sabnzbd
##
###########################################################################
###########################################################################
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
    volumes:
      - ${FOLDER_FOR_DATA:?err}/sabnzbd:/config
      - ${FOLDER_FOR_MEDIA:?err}:/data
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - TZ=${TIMEZONE:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:sabnzbd
      - TP_THEME=${TP_THEME:?err}
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "pgrep", "SABnzbd.py"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  database:
    driver: local
  redis:
    driver: local